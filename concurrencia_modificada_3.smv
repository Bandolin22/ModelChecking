MODULE main
VAR
  semaphore : boolean;
  next_process: {1,2,3};
  proc1 : process user(semaphore,next_process,1);
  proc2 : process user(semaphore,next_process,2);
  proc3 : process user(semaphore,next_process,3);

ASSIGN

 init(semaphore) := FALSE;	

SPEC AG ! (proc1.state = critical & proc2.state = critical & proc3.state = critical);
SPEC AG (proc1.state = entering -> AF proc1.state = critical);

MODULE user(semaphore, next_process, number)
VAR
  state : {idle, entering, critical, exiting};
ASSIGN
  init(state) := idle;
  next(state) :=
    case
      state = idle : 						{idle,entering};
      state = entering & !semaphore & next_process=number: 	critical;
      state = critical : 					{critical, exiting};
      state = exiting : 					idle;
      TRUE: 							state;
    esac;

  next(semaphore) :=
    case
      state = entering & next_process=number: TRUE;
      state = exiting: 	FALSE;
      TRUE: 		semaphore;
    esac;

  next(next_process) :=
    case
      state = exiting : (next_process mod 3) + 1;
      TRUE:				next_process;
    esac;

FAIRNESS
  running
FAIRNESS !(state = idle)
FAIRNESS !(state = critical)


